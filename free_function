void free_word_list(t_word *words)
{
    t_word *tmp;

    while (words)
    {
        tmp = words;
        words = words->next;
        if (tmp->value)
            free(tmp->value);
        free(tmp);
    }
}

void	free_tokens(t_token *tokens)
{
	t_token	*tmp;

	while (tokens)
	{
		tmp = tokens;
		tokens = tokens->next;
		free(tmp->value);
		free_word_list(tmp->words);
		free(tmp);
	}
}

static void free_words(t_word *w)
{
    t_word *tmp;

    while (w)
    {
        tmp = w->next;
        free(w->value);
        free(w);
        w = tmp;
    }
}

static void free_arg(t_argv *argv)
{
    t_argv *tmp;

    while (argv)
    {
        tmp = argv->next;
        if (argv->words)
            free_words(argv->words);
        free(argv);
        argv = tmp;
    }
}

static void free_cmd(t_cmd *cmd)
{
    if (!cmd)
        return;
    if (cmd->argv)
        free_arg(cmd->argv);
    if (cmd->infile)
        free_words(cmd->infile);
    if (cmd->outfile)
        free_words(cmd->outfile);
    if (cmd->delimiter)
        free_words(cmd->delimiter);
}

void free_ast(t_ast *node)
{
    if (!node)
        return;
    free_ast(node->left);
    free_ast(node->right);
    free_cmd(&node->cmd);
    free(node);
}

void	free_env(t_env *env)
{
	t_env	*tmp;

	while (env)
	{
		tmp = env->next;
		free(env->value);
		free(env->key);
		free(env);
		env = tmp;
	}
}

void	free_shell(t_shell	*shell)
{
	if (shell->env)
		free_env(shell->env);
	if (shell->tokens)
		free_tokens(shell->tokens);
	if (shell->ast)
		free_ast(shell->ast);
}


//Structures:
typedef enum e_token_type
{
	WORD,
	PIPE,
	REDIR_OUT,
	REDIR_IN,
	APPEND,
	HEREDOC,
	AND_AND,
	OR_OR,
	AMPERSAND,
	LPAREN,
	RPAREN,
}					t_token_type;

typedef enum e_quote
{
	Q_NONE,
	Q_SINGLE,
	Q_DOUBLE,
}					t_quote;

typedef struct s_word
{
	char			*value;
	t_quote			quote_type;
	struct s_word	*next;
}					t_word;

typedef struct s_token
{
	t_word			*words;
	t_token_type	type;
	char			*value;
	// int				quotes;
	// int				dquotes;
	struct s_token	*next;
}					t_token;


// parser
typedef struct s_argv
{
	t_word			*words;
	struct s_argv	*next;
}					t_argv;

typedef struct s_cmd
{
	t_argv			*argv;
	t_word			*infile;
	t_word			*outfile;
	int				append;
	int				here_doc;
	t_word			*delimiter;
	// int				*quotes;
	// int				*out_quotes;
	// int				argc;
}					t_cmd;

typedef enum e_node_type
{
	NODE_CMD,
	NODE_AND,
	NODE_OR,
	NODE_PIPE,
	NODE_GROUP,
}					t_node_type;

typedef struct s_ast
{
	t_node_type		type;
	struct s_ast	*left;
	struct s_ast	*right;
	t_cmd			cmd;
}					t_ast;


// env
typedef struct s_env
{
	char			*key;
	char			*value;
	struct s_env	*next;
}					t_env;

//Whole shell
typedef struct s_shell
{
	t_env			*env;
	t_token			*tokens;
	t_ast			*ast;
	int				exit_status;
}					t_shell;


// builtins
typedef struct s_builtin
{
	char			*name;
	int				(*f)(char **, t_shell *);
	t_shell			*shell;
}					t_builtin;

